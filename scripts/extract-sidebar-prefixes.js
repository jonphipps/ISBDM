#!/usr/bin/env node

/**
 * Script to extract sidebar prefixes from MDX files
 * Generates a TypeScript mapping of document IDs to sidebar prefixes
 */

const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');

// Config
const DOCS_DIR = path.resolve(__dirname, '../docs');
const OUTPUT_FILE = path.resolve(__dirname, '../src/utils/sidebarPrefixes.ts');

// Function to recursively get all MDX files
function getAllMdxFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);

  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      getAllMdxFiles(filePath, fileList);
    } else if (file.endsWith('.mdx')) {
      fileList.push(filePath);
    }
  });

  return fileList;
}

// Main function
function extractSidebarPrefixes() {
  console.log('Extracting sidebar prefixes from MDX files...');
  
  const mdxFiles = getAllMdxFiles(DOCS_DIR);
  console.log(`Found ${mdxFiles.length} MDX files.`);
  
  const prefixMap = {};
  let count = 0;

  mdxFiles.forEach(filePath => {
    try {
      const fileContent = fs.readFileSync(filePath, 'utf8');
      const { data } = matter(fileContent);
      
      if (data.customProps?.sidebar_prefix) {
        // Get the document ID (relative path from docs dir without extension)
        const relativePath = path.relative(DOCS_DIR, filePath);
        const docId = relativePath.replace(/\.mdx$/, '');
        
        prefixMap[docId] = data.customProps.sidebar_prefix;
        count++;
      }
    } catch (error) {
      console.error(`Error processing ${filePath}:`, error.message);
    }
  });

  console.log(`Found ${count} files with sidebar_prefix.`);

  // Generate TypeScript file
  const tsContent = `/**
 * AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
 * Generated by extract-sidebar-prefixes.js
 */

export const SIDEBAR_PREFIXES: Record<string, string> = ${JSON.stringify(prefixMap, null, 2)};
`;

  fs.writeFileSync(OUTPUT_FILE, tsContent);
  console.log(`Sidebar prefixes written to ${OUTPUT_FILE}`);
}

// Run the extraction
extractSidebarPrefixes();